(defconstant MAP_HEIGHT    20)
(defconstant MAP_WIDTH     20)
(defconstant MAP_DIMENSION  2)


(defun make-map (map-height map-width)
  (setq game_map (make-array (list MAP_HEIGHT MAP_WIDTH)))
  (dotimes (i MAP_HEIGHT)
    (dotimes (j MAP_WIDTH)
      (cond ((= i 0) (setf (aref game_map i j) "-"))
        ((= i (- MAP_HEIGHT 1) ) (setf (aref game_map i j) "-"))
        ((= j 0) (setf (aref game_map i j) "|"))
        ((= j (- MAP_WIDTH 1) ) (setf (aref game_map i j) "|"))
        ((setf (aref game_map i j) " "))
      )
    )
  )
  (return-from make-map game_map)
)

(defun print-game-map (game-map snake_position snake_size food_position)
  (screen:clear-window (screen:make-window))
  (dotimes (i MAP_HEIGHT)
    (dotimes (j MAP_WIDTH)
      (cond
        ((and (= i (car food_position)) (= j (cadr food_position ))) (princ "*"))
        ((is-snake-position snake_position snake_size i j) (princ "@"))
        (t (princ (aref game-map i j)))
      )
      (princ #\Space)
    )
    (princ #\Newline)
  )
)

(defun is-snake-position (snake_position snake_size x y)
  (dotimes (i snake_size)
    (if (and (= (aref snake_position i 0) x) (= (aref snake_position i 1) y))
      (return-from is-snake-position t)
    )
  )
  (return-from is-snake-position nil)
)

(defun get-snake-next-moviment ()
  (setq moviment (read))
  (return-from get-snake-next-moviment moviment)
)

(defun move-snake (snake_position moviment)
  (loop for i downfrom (- (* MAP_HEIGHT MAP_WIDTH) 1) to 1 by 1 do
    (setf (aref snake_position i 0) (aref snake_position (- i 1) 0))
    (setf (aref snake_position i 1) (aref snake_position (- i 1) 1))
  )
  (cond ((string-equal moviment "A") (setf (aref snake_position 0 1) (- (aref snake_position 0 1) 1) ))
        ((string-equal moviment "W") (setf (aref snake_position 0 0) (- (aref snake_position 0 0) 1) ))
        ((string-equal moviment "S") (setf (aref snake_position 0 0) (+ (aref snake_position 0 0) 1) ))
        ((string-equal moviment "D") (setf (aref snake_position 0 1) (+ (aref snake_position 0 1) 1) ))
  )
)

(defun snake-has-eaten-food (snake_position food_position)
  (if (and (= (aref snake_position 0 0) (car food_position)) ( = (aref snake_position 0 1) (cadr food_position)))
    (return-from snake-has-eaten-food t)
  )
  (return-from snake-has-eaten-food nil)
)

(defun genarate-randow-position ()
  (setq randow-x (random MAP_HEIGHT))
  (setq randow-y (random MAP_WIDTH ))
  (return-from genarate-randow-position (list randow-x randow-y))
)

(defun is-moviment-valid (moviment)
  (cond ((string-equal moviment "A") (return-from is-moviment-valid t))
        ((string-equal moviment "W") (return-from is-moviment-valid t))
        ((string-equal moviment "S") (return-from is-moviment-valid t))
        ((string-equal moviment "D") (return-from is-moviment-valid t))
  )
  (return-from is-moviment-valid nil)
)

(defun is-moviment-possible (snake_position moviment snake_size)
  (cond ((string-equal moviment "A") (or (= (+ (aref snake_position 0 1) -1) 0) (is-snake-position snake_position snake_size (aref snake_position 0 0) (+ (aref snake_position 0 1) -1)) ))
        ((string-equal moviment "W") (or (= (+ (aref snake_position 0 0) -1) 0) (is-snake-position snake_position snake_size (+ (aref snake_position 0 0) -1) (aref snake_position 0 1)) ))
        ((string-equal moviment "S") (or (= (+ (aref snake_position 0 0) 1) (- MAP_HEIGHT 1)) (is-snake-position snake_position snake_size (+ (aref snake_position 0 0) 1) (aref snake_position 0 1)) ) )
        ((string-equal moviment "D") (or (= (+ (aref snake_position 0 1) 1) (- MAP_WIDTH 1))) (is-snake-position snake_position snake_size (aref snake_position 0 0) (+ (aref snake_position 0 1) 1)) )
  )
)

(defun main()
  (setq snake_position (make-array (list (* MAP_HEIGHT MAP_WIDTH) 2) :initial-element 1 ) )
  (setq snake_size 1)
  (setq food_position (genarate-randow-position))
  (setq game_map (make-map MAP_HEIGHT MAP_WIDTH))
  (loop do
    (print-game-map game_map snake_position snake_size food_position)

    (setq moviment (get-snake-next-moviment))

    (if (is-moviment-possible snake_position moviment snake_size)
      (progn
        (princ "Moviment not possible")
        (return-from main)
      )
    )

    (if (is-moviment-valid moviment)
      (progn
        (move-snake snake_position moviment)
        (if (snake-has-eaten-food snake_position food_position)
          (progn
            (setq snake_size (+ snake_size 1))
            (setq food_position (genarate-randow-position))
          )
        )
      )
    )
  )
)

(main)
